&AtClient
Procedure Back(Command)
	
	Items.GroupVertical.Visible = True;
	Items.GroupVerticalResult.Visible = False;

EndProcedure

&AtClient
Procedure BackFromDetails(Command)
	
	Items.GroupVertical.Visible = False;
	Items.GroupVerticalResult.Visible = True;
	Items.GroupDetailsResult.Visible = False;

EndProcedure

&AtClient
Procedure TextClick(Item, StandardProcessing)
	
	StandardProcessing = False;
	
	Items.GroupVertical.Visible = False;
	Items.GroupVerticalResult.Visible = False;
	Items.GroupDetailsResult.Visible = True;
	
	AccidentNumber = StrReplace(Item.Name, "Text", "");
	AccidentNumber = Number(AccidentNumber);
	
	Lang = Left(CurrentSystemLanguage(), 2);
	Column = "English";
	Items.Details.HorizontalAlign = ItemHorizontalLocation.Left;
	If Lang = "ar" Then
		Column = "Arabic";	
		Items.Details.HorizontalAlign = ItemHorizontalLocation.Right;
	EndIf;

	Details = GetDetailedHistory(AccidentNumber, Column);
	
EndProcedure

&AtServer
Function GetCaption(Name, Column, CaptionList)
	
	Row = CaptionList.Find(Name, "Name");
	
	Return Row[Column];
	
EndFunction

&AtServer
Function GetDetailedHistory(AccidentNumber, Column)
	
	//Number	ReportNumber	ReportDate	Time	AccidentType
	//CrossingStreet	Distancefromfirstintersection	AccidientStatus	
	//Intersection	Light	LocationType	Emirate	ReportType	Year	
	//ServiceCenter	SpeedLimit	Street	StreetCondition	
	//Nearto	AccidentReasons	DamegesParts
	
	CaptionArray = New Array;
	CaptionArray.Add("ReportDate");
	CaptionArray.Add("AccidentType");
	CaptionArray.Add("Emirate");
	CaptionArray.Add("Year");
	CaptionArray.Add("DamegesParts");
	
	VT = GetFromTempStorage(VTStorageAddress);
	CaptionList = GetFromTempStorage(CaptionStorageAddress);
	
	Row = VT[AccidentNumber - 1];
	
	DetailedText = "";
	
	For Each Caption In CaptionArray Do
		
		DetailedText = DetailedText + GetCaption(Caption, Column, CaptionList) + ":" + Row[Caption] + Chars.LF;
		
	EndDo;
		
	Return DetailedText;
	
EndFunction

&AtServer
Function GetShortHistory()
	
	VT = GetFromTempStorage(VTStorageAddress);
	
	AccidentArray = New Array;
	
	For Each Accident In VT Do
		
		AccidentText = Accident.ReportDate + " " + Accident.Emirate;
		AccidentArray.Add(AccidentText);
		
	EndDo;
	
	Return AccidentArray;
	
EndFunction

&AtServer
Function SubmitAtServer(ChassisNumber)
	
	ConnectionStructure = HTTPServices.GetHTTPRequest();
	
	ConnectionStructure.Request.ResourceAddress = ConnectionStructure.Request.ResourceAddress + "/?chassisnumber="+ChassisNumber+"&type=mob";
	ConnectionStructure.Request.ResourceAddress = ConnectionStructure.Request.ResourceAddress + "&lang="+Left(CurrentSystemLanguage(), 2)+"&l="+CurrentLanguage()+"&ls="+CurrentSystemLanguage()+"&lc="+CurrentLocaleCode();
	
	Response = ConnectionStructure.Connection.Get(ConnectionStructure.Request);
	Connected = TRUE;
	
	BodyAsString = Response.GetBodyAsString();
	BodyAsString = Serialization.AddValueTag(BodyAsString);
	BodyStructure = Serialization.GetDataFromString(BodyAsString);
	Parsed = TRUE;
	
	VTStorageAddress = PutToTempStorage(BodyStructure.VT, New UUID);
	CaptionStorageAddress = PutToTempStorage(BodyStructure.CaptionList, New UUID);
	
	Return New Structure("Error, AccidentArray", BodyStructure.Error, "");
	
EndFunction

&AtClient
Procedure Submit(Command)
	
	Result = SubmitAtServer(Number);
	
	Items.GroupVertical.Visible = False;
	Items.GroupVerticalResult.Visible = True;
	Items.GroupDetailsResult.Visible = False;
	
	If ValueIsFilled(Result.Error) Then
		
		Error = Result.Error;
		Items.Error.Visible = True;
		AccidentArray = New Array;
		Items.Status.Visible = False;
		
	Else
		
		Error = "";
		Items.Error.Visible = False;
		AccidentArray = GetShortHistory();
		Items.Status.Visible = True;
		
	EndIf;
	
	NumberOfAccident = AccidentArray.Count();
		
	Status = S.P("*Accidents: "+NumberOfAccident, "*ДТП: "+NumberOfAccident, StrReplace("الحوادث: 5557*", "5557", Format(NumberOfAccident, "L=ar; ND=10")));
	
	N = 1;
	Text1 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 2;
	Text2 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 3;
	Text3 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 4;
	Text4 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 5;
	Text5 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 6;
	Text6 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 7;
	Text7 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 8;
	Text8 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	N = 9;
	Text9 = ?(N<=NumberOfAccident, AccidentArray[N-1], "");
	Items["Text"+S.S(N)].Visible = N<=NumberOfAccident;
	
EndProcedure

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	Items.GroupVertical.Visible = True;
	Items.GroupVerticalResult.Visible = False;
	Items.GroupDetailsResult.Visible = False;
	
EndProcedure    

&AtClient
Procedure BeforeClose(Cancel, Exit, MessageText, StandardProcessing)
	Cancel = True;
	Exit(False);
EndProcedure

